version: "3.8"
services:
  chat_db:
    container_name: "${CHAT_DB_CONTAINER_NAME}"
    image: postgres:latest
    environment:
      - POSTGRES_DB=${CHAT_DB_NAME}
      - POSTGRES_USER=${CHAT_DB_USERNAME}
      - POSTGRES_PASSWORD=${CHAT_DB_PASSWORD}
    ports:
      - "${CHAT_DB_HOST_PORT}:${CHAT_DB_CONTAINER_PORT}"
    restart: always
    env_file:
      - .env

  hospital_db:
    container_name: "${HOSPITAL_DB_CONTAINER_NAME}"
    image: postgres:latest
    environment:
      - POSTGRES_DB=${HOSPITAL_DB_NAME}
      - POSTGRES_PASSWORD=${HOSPITAL_DB_PASSWORD}
      - POSTGRES_USER=${HOSPITAL_DB_USERNAME}
    ports:
      - "${HOSPITAL_DB_HOST_PORT}:${HOSPITAL_DB_CONTAINER_PORT}"
    restart: always
    env_file:
      - .env

  rabbitmq:
    container_name: "${RABBITMQ_CONTAINER_NAME}"
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
    ports:
      - "${RABBIT_MQ_DEFAULT_PORT}:${RABBIT_MQ_DEFAULT_PORT}"
      - "${RABBIT_MQ_SECOND_PORT}:${RABBIT_MQ_SECOND_PORT}"
    restart: always
    env_file:
      - .env

  redis:
    image: redis:latest
    container_name: "${REDIS_CONTAINER_NAME}"
    ports:
      - "${REDIS_HOST_PORT}:${REDIS_CONTAINER_PORT}"
    env_file:
      - .env

  chat_setvice:
    container_name: chat_service
    image: chatservice:latest
    build:
      dockerfile: Dockerfile.chatservice
      context: .
    ports:
      - "${CHAT_SERVICE_HOST_PORT}:${CHAT_SERVICE_CONTAINER_PORT}"
    depends_on:
      - chat_db
      - redis
    restart: always
    environment:
      - CHAT_DATABASE_NAME=${CHAT_DB_NAME}
      - CHAT_DATABASE_USERNAME=${CHAT_DB_USERNAME}
      - CHAT_DATABASE_PASSWORD=${CHAT_DB_PASSWORD}
      - CHAT_DATABASE_PORT=${CHAT_DB_CONTAINER_PORT}
      - REDIS_CONTAINER_PORT=${REDIS_CONTAINER_PORT}
      - REDIS_HOST_NAME=${REDIS_CONTAINER_NAME}
    env_file:
      - .env

  emergency_service:
    container_name: emergency_service
    image: emergencyservice:latest
    build:
      dockerfile: Dockerfile.emergencyservice
      context: .
    ports:
      - "${EMERGENCY_SERVICE_HOST_PORT}:${EMERGENCY_SERVICE_CONTAINER_PORT}"
    depends_on:
      - rabbitmq
    restart: always
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_HOST=${RABBITMQ_CONTAINER_NAME}
      - RABBITMQ_PORT=${RABBIT_MQ_DEFAULT_PORT}
    env_file:
      - .env

  hospital_service:
    container_name: hospital_service
    image: hospitalservice:latest
    build:
      dockerfile: Dockerfile.hostpitalservice
      context: .
    ports:
      - "${HOSPITAL_SERVICE_HOST_PORT}:${HOSPITAL_SERVICE_CONTAINER_PORT}"
    depends_on:
      - hospital_db
      - redis
    restart: always
    environment:
      - HOSPITAL_DB_NAME=${HOSPITAL_DB_NAME}
      - HOSPITAL_DB_USERNAME=${HOSPITAL_DB_USERNAME}
      - HOSPITAL_DB_PASSWORD=${HOSPITAL_DB_PASSWORD}
      - HOSPITAL_DB_PORT=${HOSPITAL_DB_CONTAINER_PORT}
      - HOSPITAL_DB_CONTAINER_NAME=${HOSPITAL_DB_CONTAINER_NAME}
      - REDIS_CONTAINER_PORT=${REDIS_CONTAINER_PORT}
      - REDIS_HOST_NAME=${REDIS_CONTAINER_NAME}
    env_file:
      - .env

  patient_bot:
    container_name: "${PATIENT_TELEGRAM_BOT_CONTAINER_NAME}"
    image: patientbot:latest
    build:
      dockerfile: Dockerfile.patientbot
      context: .
    ports:
      - "${PATIENT_TELEGRAM_BOT_HOST_PORT}:${PATIENT_TELEGRAM_BOT_CONTAINER_PORT}"
    environment:
      - PATIENT_TOKEN=${PATIENT_TOKEN}
    env_file:
      - .env
      - .env.override

  doctor_bot:
    container_name: "${DOCTOR_TELEGRAM_BOT_CONTAINER_NAME}"
    image: doctorbot:latest
    build:
      dockerfile: Dockerfile.doctorbot
      context: .
    ports:
      - "${DOCTOR_TELEGRAM_BOT_HOST_PORT}:${DOCTOR_TELEGRAM_BOT_CONTAINER_PORT}"
    environment:
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_HOST=${RABBITMQ_CONTAINER_NAME}
      - RABBITMQ_PORT=${RABBIT_MQ_DEFAULT_PORT}
      - DOCTOR_TOKEN=${DOCTOR_TOKEN}
    env_file:
      - .env
      - .env.override

  jenkins:
    image: jenkins-server:latest
    container_name: jenkins-server
    build:
      context: .
      dockerfile: Dockerfile.jenkins
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:8080"

